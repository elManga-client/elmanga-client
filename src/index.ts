import {
  getMangaList,
  getOneChapter,
  getPageUrl,
  getRandomManga,
  getServer,
} from '@elmanga/mangadex-lib';
import { app, BrowserWindow, ipcMain } from 'electron';

// This allows TypeScript to pick up the magic constant that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require('electron-squirrel-startup')) {
  // eslint-disable-line global-require
  app.quit();
}

const createWindow = (): void => {
  console.log(MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY);

  // Create the browser window.
  const mainWindow = new BrowserWindow({
    height: 600,
    width: 800,
    webPreferences: {
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
    },
  });

  mainWindow.setMenuBarVisibility(false);

  // and load the index.html of the app.
  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);

  // Open the DevTools.
  // mainWindow.webContents.openDevTools();
};

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on('ready', createWindow);

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on('window-all-closed', () => {
  if (process.platform !== 'darwin') {
    app.quit();
  }
});

app.on('activate', () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.
ipcMain.on(
  'random-manga-request',
  async (event, { message }: Record<string, unknown>) => {
    console.log(message);
    for (let i = 0; i < 3; ++i) {
      try {
        const manga = await getRandomManga();
        const chapter = await getOneChapter(manga);
        const serverBaseUrl = await getServer(chapter.id);
        const pageUrls: string[] = [];
        for (const fileName of chapter.attributes.data) {
          pageUrls.push(await getPageUrl(chapter, serverBaseUrl, fileName));
        }
        return event.reply('random-manga-response', { manga, pageUrls });
      } catch (error) {
        event.reply('random-manga-response', { error: error.message });
      }
    }
  }
);

ipcMain.on('manga-list-request', async (event, { options }) => {
  for (let i = 0; i < 3; ++i) {
    try {
      const mangaList = await getMangaList(options);
      return event.reply('manga-list-response', {
        mangaList: mangaList,
      });
    } catch (error) {
      event.reply('manga-list-response', { error: error.message });
    }
  }
});

import update from 'update-electron-app';
update();
